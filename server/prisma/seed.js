const { PrismaClient } = require('@prisma/client')
const bcrypt = require('bcryptjs')

const prisma = new PrismaClient()

async function main() {
  console.log('Starting database seeding...')

  // Create admin user
  const hashedPassword = await bcrypt.hash('admin123', 12)
  
  const adminUser = await prisma.user.upsert({
    where: { identifiant: 'admin' },
    update: {},
    create: {
      identifiant: 'admin',
      password: hashedPassword,
      nom: 'LECHEF',
      prenom: 'Michel',
      mail: 'miche.lechef@interieur.gouv.fr',
      role: 'ADMIN',
      grade: 'LCL'
    }
  })

  console.log('‚úÖ Admin user created:', adminUser.identifiant)

  // Create SGAMI entries
  const sgamiData = [
    { nom: 'SGAMI OUEST', formatCourtNommage: 'OUEST' },
    { nom: 'SGAMI NORD', formatCourtNommage: 'NORD' },
    { nom: 'SGAMI SUD-OUEST', formatCourtNommage: 'SO' },
    { nom: 'SGAMI SUD-EST', formatCourtNommage: 'SE' },
    { nom: 'SGAMI ILE-DE-FRANCE', formatCourtNommage: 'IDF' },
    { nom: 'SGAMI EST', formatCourtNommage: 'EST-CONSIGNATION' },
    { nom: 'SGAMI EST', formatCourtNommage: 'EST' },
    { nom: 'SGAMI SUD', formatCourtNommage: 'SUD' },
    { nom: 'SATPN NOUVELLE-CALEDONIE', formatCourtNommage: 'NC' },
    { nom: 'SATPN LA REUNION', formatCourtNommage: 'REUNION' },
    { nom: 'SATPN GUYANE', formatCourtNommage: 'GUYANE' },
    { nom: 'SATPN MARTINIQUE', formatCourtNommage: 'MARTINIQUE' },
    { nom: 'SATPN GUADELOUPE', formatCourtNommage: 'GUADELOUPE' },
    { nom: 'SATPN MAYOTTE', formatCourtNommage: 'MAYOTTE' },
    { nom: 'SGAP POLYNESIE FRANCAISE', formatCourtNommage: 'POLYNESIE' },
    { nom: 'CPFI', formatCourtNommage: 'CPFI' }
  ]

  for (const sgami of sgamiData) {
    await prisma.sgami.upsert({
      where: { nom: sgami.nom },
      update: { formatCourtNommage: sgami.formatCourtNommage },
      create: { nom: sgami.nom, formatCourtNommage: sgami.formatCourtNommage }
    })
  }

  console.log('‚úÖ SGAMI entries created')

  // Create badges
  const badgesData = [
    { nom: 'Signal√©', couleur: '#ef4444' },
    { nom: 'UDA', couleur: '#f97316' },
    { nom: 'VSS', couleur: '#10b981' }
  ]

  for (const badge of badgesData) {
    await prisma.badge.upsert({
      where: { nom: badge.nom },
      update: {},
      create: badge
    })
  }

  console.log('‚úÖ Badges created')

  // Create sample lawyers
  const avocatsData = [
    {
      nom: 'DUPONT',
      prenom: 'Jean',
      region: '√éle-de-France',
      adressePostale: '15 rue de la Justice, 75001 Paris',
      telephonePublic1: '01.23.45.67.89',
      email: 'j.dupont@avocats.fr',
      villesIntervention: JSON.stringify(['Paris', 'Versailles', 'Cr√©teil', 'Bobigny', 'Pontoise']),
      notes: 'Tr√®s exp√©riment√© en droit p√©nal. Disponible pour interventions urgentes. Excellentes relations avec les tribunaux parisiens.',
      specialisation: 'Droit p√©nal',
      siretOuRidet: '12345678901234',
      titulaireDuCompteBancaire: 'DUPONT Jean',
      codeEtablissement: '30004',
      codeGuichet: '00170',
      numeroDeCompte: '00001234567',
      cle: '89'
    },
    {
      nom: 'MARTIN',
      prenom: 'Marie',
      region: 'Auvergne-Rh√¥ne-Alpes',
      adressePostale: '32 avenue des Droits, 69001 Lyon',
      telephonePublic1: '04.56.78.90.12',
      email: 'm.martin@avocats.fr',
      villesIntervention: JSON.stringify(['Lyon', 'Villeurbanne', 'Saint-√âtienne', 'Grenoble', 'Chamb√©ry']),
      notes: 'Sp√©cialis√©e dans les affaires familiales et successions. Tr√®s p√©dagogue avec les clients. Ma√Ætrise parfaitement les proc√©dures d\'urgence.',
      specialisation: 'Droit civil',
      siretOuRidet: '98765432109876',
      titulaireDuCompteBancaire: 'MARTIN Marie',
      codeEtablissement: '10278',
      codeGuichet: '00050',
      numeroDeCompte: '00009876543',
      cle: '21'
    },
    {
      nom: 'LEROY',
      prenom: 'Pierre',
      region: 'Provence-Alpes-C√¥te d\'Azur',
      adressePostale: '8 place du Palais, 13001 Marseille',
      telephonePublic1: '04.91.23.45.67',
      email: 'p.leroy@avocats.fr',
      villesIntervention: JSON.stringify(['Marseille', 'Aix-en-Provence', 'Toulon', 'Nice', 'Avignon']),
      notes: 'Expert en contentieux administratif et march√©s publics. Ancien magistrat administratif. Tr√®s rigoureux dans le suivi des dossiers.',
      specialisation: 'Droit administratif',
      siretOuRidet: '45678912345678',
      titulaireDuCompteBancaire: 'LEROY Pierre',
      codeEtablissement: '13807',
      codeGuichet: '00020',
      numeroDeCompte: '00005551234',
      cle: '67'
    }
  ]

  for (const avocat of avocatsData) {
    const existing = await prisma.avocat.findFirst({
      where: { email: avocat.email }
    })
    
    if (!existing) {
      await prisma.avocat.create({
        data: avocat
      })
    }
  }

  console.log('‚úÖ Sample lawyers created')

  // Create a test user
  const testUserPassword = await bcrypt.hash('test123', 12)
  
  const testUser = await prisma.user.upsert({
    where: { identifiant: 'test' },
    update: {},
    create: {
      identifiant: 'test',
      password: testUserPassword,
      nom: 'PASCHEF',
      prenom: 'Laurent',
      mail: 'laurent.pachef@interieur.gouv.fr',
      role: 'REDACTEUR',
      grade: 'GAV'
    }
  })

  console.log('‚úÖ Test user created:', testUser.identifiant)

  // Create default visas
  const visasData = [
    {
      typeVisa: 'MILITAIRE',
      texteVisa: 'Vu le code de la d√©fense, notamment son article L. 4123-10 ;\nVu le code de la s√©curit√© int√©rieure, notamment son article L. 113-1;\nVu la fiche Astr√©e 5.7.1.1 relative √† la protection fonctionnelle;',
      active: true
    },
    {
      typeVisa: 'CIVIL',
      texteVisa: 'Vu le code g√©n√©ral de la fonction publique, notamment ses articles L. 134-1 et suivants;\nVu le d√©cret n¬∞ 2017-97 du 26 janvier 2017;',
      active: true
    }
  ]

  for (const visa of visasData) {
    await prisma.visa.upsert({
      where: { typeVisa: visa.typeVisa },
      update: {},
      create: visa
    })
  }

  console.log('‚úÖ Default visas created')

  // Seed PCE data
  console.log('üå± Starting PCE seeding...')
  
  const pceData = [
    {
      ordre: 1,
      pceDetaille: 'R√®glement des frais et honoraires d\'avocat (PCE 6131.000.000)',
      pceNumerique: 'PCE 6131.000.000',
      codeMarchandise: '40.03.02'
    },
    {
      ordre: 2,
      pceDetaille: 'Remboursement des frais et honoraires d\'avocat (PCE 6131.000.000)',
      pceNumerique: 'PCE 6131.000.000',
      codeMarchandise: '40.03.02'
    },
    {
      ordre: 3,
      pceDetaille: 'R√®glement des frais de consignation d\'expertise (PCE 6135.000.000)',
      pceNumerique: 'PCE 6135.000.000',
      codeMarchandise: '43.01.01'
    },
    {
      ordre: 4,
      pceDetaille: 'Remboursement des frais de consignation d\'expertise (PCE 6135.000.000)',
      pceNumerique: 'PCE 6135.000.000',
      codeMarchandise: '43.01.01'
    },
    {
      ordre: 5,
      pceDetaille: 'R√®glement des frais et honoraires d\'huissier (PCE 6134.000.000)',
      pceNumerique: 'PCE 6134.000.000',
      codeMarchandise: '40.03.03'
    },
    {
      ordre: 6,
      pceDetaille: 'Remboursement des honoraires d\'huissier (PCE 6134.000.000)',
      pceNumerique: 'PCE 6134.000.000',
      codeMarchandise: '40.03.03'
    },
    {
      ordre: 7,
      pceDetaille: 'R√®glement des frais et honoraires d\'un m√©decin conseil (PCE 6135.000.000)',
      pceNumerique: 'PCE 6135.000.000',
      codeMarchandise: '43.01.01'
    },
    {
      ordre: 8,
      pceDetaille: 'Remboursement des frais et honoraires d\'un m√©decin conseil (PCE 6135.000.000)',
      pceNumerique: 'PCE 6135.000.000',
      codeMarchandise: '43.01.01'
    },
    {
      ordre: 9,
      pceDetaille: 'R√©paration directe du pr√©judice (PCE 6222.000.000)',
      pceNumerique: 'PCE 6222.000.000',
      codeMarchandise: '46.01.02'
    },
    {
      ordre: 10,
      pceDetaille: 'R√®glement des frais de mission, d√©placement et repas (PCE 6153.110.000)',
      pceNumerique: 'PCE 6135.110.000',
      codeMarchandise: '25.01.01'
    },
    {
      ordre: 11,
      pceDetaille: 'Remboursement des frais de mission, d√©placement et repas (PCE 6153.110.000)',
      pceNumerique: 'PCE 6135.110.000',
      codeMarchandise: '25.01.01'
    },
    {
      ordre: 12,
      pceDetaille: 'Remboursement FGTI des sommes vers√©es (PCE 6222.000.000) au profit',
      pceNumerique: 'PCE 6222.000.000',
      codeMarchandise: '46.01.02'
    },
    {
      ordre: 13,
      pceDetaille: 'R√®glement des frais d\'actes et de proc√©dure (PCE 6137.000.000)',
      pceNumerique: 'PCE 6137.000.000',
      codeMarchandise: '45.03.01'
    },
    {
      ordre: 14,
      pceDetaille: 'Remboursement des frais d\'actes et de proc√©dure (PCE 6137.000.000)',
      pceNumerique: 'PCE 6137.000.000',
      codeMarchandise: '45.03.01'
    },
    {
      ordre: 15,
      pceDetaille: 'R√®glement des autres p√©nalit√©s et condamnations (PCE 6228.000.000)',
      pceNumerique: 'PCE 6228.000.000',
      codeMarchandise: '46.01.03'
    },
    {
      ordre: 16,
      pceDetaille: 'Remboursement des autres p√©nalit√©s et condamnations (PCE 6228.000.000)',
      pceNumerique: 'PCE 6228.000.000',
      codeMarchandise: '46.01.03'
    }
  ]

  console.log(`üìä ${pceData.length} PCE √† ins√©rer...`)

  // Supprimer les PCE existants
  await prisma.pce.deleteMany({})
  console.log('üóëÔ∏è  PCE existants supprim√©s')

  // Ins√©rer les nouveaux PCE
  for (const pce of pceData) {
    try {
      await prisma.pce.create({
        data: pce
      })
    } catch (error) {
      console.error(`‚ùå Erreur lors de l'insertion du PCE: ${pce.pceDetaille}`, error.message)
    }
  }

  const pceCount = await prisma.pce.count()
  console.log(`‚úÖ ${pceCount} PCE ins√©r√©s avec succ√®s!`)

  // Seed Diligences data
  console.log('üå± Starting Diligences seeding...')

  const diligencesData = [
    {
      nom: 'comparution sur reconnaissance pr√©alable de culpabilit√©',
      details: 'Ces honoraires couvrent les diligences pour la repr√©sentation des militaires dans le cadre d\'une proc√©dure de comparution sur reconnaissance pr√©alable de culpabilit√© :\n- L\'√©tude des pi√®ces communiqu√©es par les clients ainsi que par le parquet\n- L\'entretien de pr√©paration de l\'audience avec le ou les militaires\n- L\'audience de plaidoirie\n- R√©dactions des conclusions\n- Le conseil en vue de l\'acceptation de la d√©cision ou de l\'orientation vers une proc√©dure d\'appel\n- La saisine du service d\'aide au recouvrement des victimes d\'infractions (SARVI)',
    },
    {
      nom: 'audition libre ou garde √† vue',
      details: 'Ces honoraires couvrent les diligences effectu√©es au titre de l\'assistance lors de l\'audition libre ou de la garde √† vue.',
    },
    {
      nom: 'interrogatoire de premi√®re comparution',
      details: 'Ces honoraires couvrent les diligences effectu√©es au titre de l\'assistance lors de l\'interrogatoire de premi√®re comparution.',
    },
    {
      nom: 'information judiciaire',
      details: 'Ces honoraires couvrent les diligences √©num√©r√©es ci-apr√®s :\n- Les rendez-vous, consultations et recherches r√©alis√©es en vue de l\'orientation de la proc√©dure et de la d√©fense des militaires\n- L\'√©tude de toute pi√®ce utile √† la proc√©dure\n- Les auditions devant le juge d\'instruction\n- Les observations pr√©sent√©es au juge d\'instruction\n- Les demandes de r√©alisation d\'actes dans l\'int√©r√™t du ou des militaires\n- La saisine et/ou la pr√©paration des audiences devant la chambre de l\'instruction\n- La pr√©paration du dossier de plaidoirie\n- La r√©daction de conclusions',
    },
    {
      nom: 'information judiciaire sans mis en cause interpell√©',
      details: 'Ces honoraires couvrent les diligences effectu√©es au titre de l\'assistance au cours de l\'information judiciaire jusqu\'√† l\'interpellation du mis en cause.',
    },
    {
      nom: 'comparution imm√©diate',
      details: 'Ces honoraires couvrent les diligences √©num√©r√©es ci-apr√®s :\n- Les rendez-vous, consultations et recherches r√©alis√©es en vue de l\'orientation de la proc√©dure et de la pr√©paration de la d√©fense des militaires\n- L\'√©tude de toute pi√®ce utile √† la proc√©dure\n- La r√©daction de conclusions\n- La pr√©paration du dossier de plaidoirie\n- La pr√©sence lors de l\'audience de plaidoirie\n- La pr√©sence lors du d√©lib√©r√©\n- Le conseil en vue de l\'acceptation de la d√©cision ou de l\'orientation vers une proc√©dure d\'appel\n- La saisine du service d\'aide au recouvrement des victimes d\'infraction (SARVI)',
    },
    {
      nom: 'premi√®re instance sans renvoi sur int√©r√™ts civils',
      details: 'Ces honoraires couvrent les diligences √©num√©r√©es ci-apr√®s :\n- Les rendez-vous, consultations et recherches r√©alis√©es en vue de l\'orientation de la proc√©dure et de la pr√©paration de la d√©fense des militaires\n- L\'√©tude de toute pi√®ce utile √† la proc√©dure\n- La r√©daction de conclusions\n- La pr√©paration du dossier de plaidoirie\n- La pr√©sence lors de l\'audience de plaidoirie\n- La pr√©sence lors du d√©lib√©r√©\n- Le conseil en vue de l\'acceptation de la d√©cision ou de l\'orientation vers une proc√©dure d\'appel\n- La saisine du service d\'aide au recouvrement des victimes d\'infraction (SARVI)',
    },
    {
      nom: 'premi√®re instance avec renvoi sur int√©r√™ts civils',
      details: 'Ces honoraires couvrent les diligences √©num√©r√©es ci-apr√®s :\n- Les rendez-vous, consultations et recherches r√©alis√©es en vue de l\'orientation de la proc√©dure et de la pr√©paration de la d√©fense des militaires\n- L\'√©tude de toute pi√®ce utile √† la proc√©dure\n- L\'assistance √† l\'expertise m√©dicale et aux r√©unions subs√©quentes\n- La r√©daction de dire √† expert\n- La r√©daction de conclusions\n- La pr√©paration du dossier de plaidoirie\n- La pr√©sence lors de l\'audience sur le fond\n- La pr√©sence lors du d√©lib√©r√©\n- Le conseil en vue de l\'acceptation de la d√©cision sur le fond ou l\'orientation vers une proc√©dure d\'appel\n- La saisine du service d\'aide au recouvrement des victimes d\'infractions (SARVI)',
    },
    {
      nom: 'appel',
      details: 'Ces honoraires couvrent les diligences √©num√©r√©es ci-apr√®s :\n- Les rendez-vous en vue de la pr√©paration de la d√©fense\n- L\'√©tude de toute pi√®ce utile √† la proc√©dure\n- La r√©daction de conclusions\n- La pr√©paration du dossier de plaidoirie\n- L\'audience de plaidoirie\n- La pr√©sence lors du d√©lib√©r√©\n- Le conseil en vue de l\'acceptation de la d√©cision ou l\'orientation vers un pourvoi en cassation\n- La saisine du service d\'aide au recouvrement des victimes d\'infractions (SARVI)',
    },
    {
      nom: 'commission d\'indemnisation des victimes d\'infractions',
      details: 'Ces honoraires couvrent les diligences √©num√©r√©es ci-apr√®s :\n- Les rendez-vous en vue du rassemblement des pi√®ces n√©cessaires √† la proc√©dure\n- La requ√™te introductive et demande de provision\n- La pr√©paration et l\'assistance √† l\'expertise\n- La r√©daction de conclusions et de dires\n- La pr√©paration du dossier de plaidoirie\n- La requ√™te pour la liquidation des pr√©judices\n- Le conseil en vue de l\'acceptation de l\'offre d\'indemnisation rendue ou l\'orientation vers une proc√©dure d\'appel de la d√©cision',
    },
    {
      nom: 'ajout de militaire(s) au dossier',
      details: 'Ces honoraires couvrent les diligences suppl√©mentaires li√©es √† l\'ajout d\'un ou plusieurs militaires dans le dossier en cours de proc√©dure.',
    },
    {
      nom: 'renvois d\'audiences',
      details: 'Ces honoraires couvrent les diligences suppl√©mentaires occasionn√©es par le renvoi d\'audiences et les nouvelles pr√©parations n√©cessaires.',
    },
    {
      nom: 'assistance √† expertise m√©dicale',
      details: 'Ces honoraires couvrent les diligences effectu√©es au titre de l\'assistance lors d\'expertises m√©dicales.',
    },
    {
      nom: 'multiplicit√© des actes √† accomplir dans la proc√©dure',
      details: 'Ces honoraires couvrent les diligences suppl√©mentaires dues √† la complexit√© et √† la multiplicit√© des actes n√©cessaires dans la proc√©dure.',
    },
    {
      nom: 'interpellation du mis en cause',
      details: 'Ces honoraires couvrent les diligences √©num√©r√©es ci-apr√®s :\n- Les rendez-vous, consultations et recherches r√©alis√©es en vue de l\'orientation de la proc√©dure et de la d√©fense des militaires\n- L\'√©tude de toute pi√®ce utile √† la proc√©dure\n- Les auditions devant le juge d\'instruction\n- Les observations pr√©sent√©es au juge d\'instruction\n- Les demandes de r√©alisation d\'actes dans l\'int√©r√™t du ou des militaires\n- La saisine et/ou la pr√©paration des audiences devant la chambre de l\'instruction\n- La pr√©paration du dossier de plaidoirie\n- La r√©daction de conclusions',
    },
    {
      nom: 'audience devant une autre juridiction (majeur/mineur)',
      details: 'Ces honoraires couvrent les diligences effectu√©es lors d\'audiences devant des juridictions autres que celles initialement saisies, notamment pour les affaires impliquant des majeurs et des mineurs.',
    },
    {
      nom: 'cassation',
      details: 'Ces honoraires couvrent les diligences utiles et n√©cessaires √† la d√©fense des militaires devant la cour de cassation.',
    },
    {
      nom: 'assises',
      details: 'Ces honoraires couvrent les diligences √©num√©r√©es ci-apr√®s :\n- Les rendez-vous, consultations et recherches r√©alis√©es en vue de l\'orientation de la proc√©dure et de la pr√©paration de la d√©fense des militaires\n- L\'√©tude de toute pi√®ce utile √† la proc√©dure communiqu√©es par les clients ainsi que par le parquet\n- L\'assistance √† l\'expertise m√©dicale et aux r√©unions subs√©quentes\n- La r√©daction de dire √† expert\n- La r√©daction de conclusions\n- La pr√©paration du dossier de plaidoirie\n- La pr√©sence lors de l\'audience sur le fond et les √©ventuelles audiences de renvoi\n- La pr√©sence lors du d√©lib√©r√©\n- Le conseil en vue de l\'acceptation de la d√©cision sur le fond ou l\'orientation vers une proc√©dure d\'appel\n- La saisine du service d\'aide au recouvrement des victimes d\'infractions (SARVI)',
    },
    {
      nom: 'assises appel',
      details: 'Ces honoraires couvrent les diligences √©num√©r√©es ci-apr√®s :\n- Les rendez-vous, consultations et recherches r√©alis√©es en vue de l\'orientation de la proc√©dure et de la pr√©paration de la d√©fense des militaires\n- L\'√©tude de toute pi√®ce utile √† la proc√©dure communiqu√©es par les clients ainsi que par le parquet\n- L\'assistance √† l\'expertise m√©dicale et aux r√©unions subs√©quentes\n- La r√©daction de dire √† expert\n- La r√©daction de conclusions\n- La pr√©paration du dossier de plaidoirie\n- La pr√©sence lors de l\'audience sur le fond et les √©ventuelles audiences de renvoi\n- La pr√©sence lors du d√©lib√©r√©\n- Le conseil en vue de l\'acceptation de la d√©cision sur le fond ou l\'orientation vers une proc√©dure de cassation\n- La saisine du service d\'aide au recouvrement des victimes d\'infractions (SARVI)',
    },
    {
      nom: 'assistance √† reconstitution',
      details: 'Ces honoraires couvrent les diligences effectu√©es au titre de l\'assistance lors de la reconstitution.',
    },
    {
      nom: 'enqu√™te',
      details: 'Ces honoraires couvrent les diligences effectu√©es au titre de l\'assistance lors de la phase d\'enqu√™te.',
    }
  ]

  console.log(`üìã ${diligencesData.length} diligences √† ins√©rer...`)

  // Supprimer les diligences existantes
  await prisma.diligence.deleteMany({})
  console.log('üóëÔ∏è  Diligences existantes supprim√©es')

  // Ins√©rer les nouvelles diligences
  for (const diligence of diligencesData) {
    try {
      await prisma.diligence.create({
        data: {
          ...diligence,
          active: true
        }
      })
    } catch (error) {
      console.error(`‚ùå Erreur lors de l'insertion de la diligence: ${diligence.nom}`, error.message)
    }
  }

  const diligenceCount = await prisma.diligence.count()
  console.log(`‚úÖ ${diligenceCount} diligences ins√©r√©es avec succ√®s!`)

  // Seed Grades data
  console.log('üå± Starting Grades seeding...')

  const gradesData = [
    { ordre: 1, gradeComplet: 'G√©n√©ral', gradeAbrege: 'GEN' },
    { ordre: 2, gradeComplet: 'Colonel', gradeAbrege: 'COL' },
    { ordre: 3, gradeComplet: 'Lieutenant-colonel', gradeAbrege: 'LCL' },
    { ordre: 4, gradeComplet: "Chef d'escadron", gradeAbrege: 'CEN' },
    { ordre: 5, gradeComplet: 'Commandant', gradeAbrege: 'CDT' },
    { ordre: 6, gradeComplet: 'Capitaine', gradeAbrege: 'CNE' },
    { ordre: 7, gradeComplet: 'Lieutenant', gradeAbrege: 'LTN' },
    { ordre: 8, gradeComplet: 'Sous-lieutenant', gradeAbrege: 'SLT' },
    { ordre: 9, gradeComplet: 'Aspirant', gradeAbrege: 'ASP' },
    { ordre: 10, gradeComplet: 'Major', gradeAbrege: 'MAJ' },
    { ordre: 11, gradeComplet: 'Adjudant-chef', gradeAbrege: 'ADC' },
    { ordre: 12, gradeComplet: 'Adjudant', gradeAbrege: 'ADJ' },
    { ordre: 13, gradeComplet: 'Mar√©chal des logis-chef', gradeAbrege: 'MDC' },
    { ordre: 14, gradeComplet: 'Gendarme', gradeAbrege: 'GND' },
    { ordre: 15, gradeComplet: '√âl√®ve gendarme', gradeAbrege: 'ELG' },
    { ordre: 16, gradeComplet: 'Mar√©chal des logis', gradeAbrege: 'MDL' },
    { ordre: 17, gradeComplet: 'Brigadier-chef', gradeAbrege: 'BRC' },
    { ordre: 18, gradeComplet: 'Brigadier', gradeAbrege: 'BRI' },
    { ordre: 19, gradeComplet: 'Gendarme adjoint volontaire', gradeAbrege: 'GAV' },
    { ordre: 20, gradeComplet: 'Gendarme adjoint de 2√®me classe', gradeAbrege: 'GA2' },
    { ordre: 21, gradeComplet: 'Madame', gradeAbrege: 'Mme' },
    { ordre: 22, gradeComplet: 'Monsieur', gradeAbrege: 'M' }
  ]

  console.log(`üéñÔ∏è  ${gradesData.length} grades √† ins√©rer...`)

  // Supprimer les grades existants
  await prisma.grade.deleteMany({})
  console.log('üóëÔ∏è  Grades existants supprim√©s')

  // Ins√©rer les nouveaux grades
  for (const grade of gradesData) {
    try {
      await prisma.grade.create({
        data: grade
      })
    } catch (error) {
      console.error(`‚ùå Erreur lors de l'insertion du grade: ${grade.gradeComplet}`, error.message)
    }
  }

  const gradeCount = await prisma.grade.count()
  console.log(`‚úÖ ${gradeCount} grades ins√©r√©s avec succ√®s!`)

  console.log('üéâ Database seeding completed!')
  console.log('')
  console.log('Login credentials:')
  console.log('Admin - identifiant: admin, password: admin123')
  console.log('Test user - identifiant: test, password: test123')
}

main()
  .then(async () => {
    await prisma.$disconnect()
  })
  .catch(async (e) => {
    console.error(e)
    await prisma.$disconnect()
    process.exit(1)
  })